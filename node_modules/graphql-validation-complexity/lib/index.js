'use strict';

exports.__esModule = true;
exports.ComplexityVisitor = exports.CostCalculator = undefined;
exports.complexityLimitExceededErrorMessage = complexityLimitExceededErrorMessage;
exports.createComplexityLimitRule = createComplexityLimitRule;

var _graphql = require('graphql');

var _introspection = require('graphql/type/introspection');

var IntrospectionTypes = _interopRequireWildcard(_introspection);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CostCalculator = exports.CostCalculator = function () {
  function CostCalculator() {
    _classCallCheck(this, CostCalculator);

    this.immediateCost = 0;
    this.fragmentCosts = [];

    this.cost = null;
  }

  CostCalculator.prototype.addImmediate = function addImmediate(cost) {
    this.immediateCost += cost;
  };

  CostCalculator.prototype.addFragment = function addFragment(costFactor, name) {
    this.fragmentCosts.push([costFactor, name]);
  };

  CostCalculator.prototype.calculateCost = function calculateCost(fragmentCalculators) {
    if (this.cost !== null) {
      return this.cost;
    }

    var cost = this.immediateCost;
    this.fragmentCosts.forEach(function (_ref) {
      var costFactor = _ref[0],
          name = _ref[1];

      var fragmentCalculator = fragmentCalculators[name];
      if (!fragmentCalculator) {
        // Illegal query with undefined fragment.
        return;
      }

      cost += costFactor * fragmentCalculator.calculateCost(fragmentCalculators);
    });

    this.cost = cost;
    return cost;
  };

  return CostCalculator;
}();

var ComplexityVisitor = exports.ComplexityVisitor = function () {
  function ComplexityVisitor(context, _ref2) {
    var _ref2$scalarCost = _ref2.scalarCost,
        scalarCost = _ref2$scalarCost === undefined ? 1 : _ref2$scalarCost,
        _ref2$objectCost = _ref2.objectCost,
        objectCost = _ref2$objectCost === undefined ? 0 : _ref2$objectCost,
        _ref2$listFactor = _ref2.listFactor,
        listFactor = _ref2$listFactor === undefined ? 10 : _ref2$listFactor,
        _ref2$introspectionLi = _ref2.introspectionListFactor,
        introspectionListFactor = _ref2$introspectionLi === undefined ? 2 : _ref2$introspectionLi;

    _classCallCheck(this, ComplexityVisitor);

    this.context = context;

    this.scalarCost = scalarCost;
    this.objectCost = objectCost;
    this.listFactor = listFactor;
    this.introspectionListFactor = introspectionListFactor;

    this.currentFragment = null;
    this.costFactor = 1;

    this.rootCalculator = new CostCalculator();
    this.fragmentCalculators = Object.create(null);

    this.Field = {
      enter: this.enterField,
      leave: this.leaveField
    };

    this.FragmentSpread = this.enterFragmentSpread;

    this.FragmentDefinition = {
      enter: this.enterFragmentDefinition,
      leave: this.leaveFragmentDefinition
    };
  }

  ComplexityVisitor.prototype.enterField = function enterField() {
    this.costFactor *= this.getFieldCostFactor();
    this.getCalculator().addImmediate(this.costFactor * this.getFieldCost());
  };

  ComplexityVisitor.prototype.leaveField = function leaveField() {
    this.costFactor /= this.getFieldCostFactor();
  };

  ComplexityVisitor.prototype.getFieldCostFactor = function getFieldCostFactor() {
    var fieldDef = this.context.getFieldDef();
    if (fieldDef && fieldDef.getCostFactor) {
      return fieldDef.getCostFactor();
    }

    var directiveCostFactor = this.getDirectiveValue('costFactor');
    if (directiveCostFactor != null) {
      return directiveCostFactor;
    }

    return this.getTypeCostFactor(this.context.getType());
  };

  ComplexityVisitor.prototype.getTypeCostFactor = function getTypeCostFactor(type) {
    if (type instanceof _graphql.GraphQLNonNull) {
      return this.getTypeCostFactor(type.ofType);
    } else if (type instanceof _graphql.GraphQLList) {
      var typeListFactor = this.isIntrospectionList(type) ? this.introspectionListFactor : this.listFactor;
      return typeListFactor * this.getTypeCostFactor(type.ofType);
    }

    return 1;
  };

  ComplexityVisitor.prototype.isIntrospectionList = function isIntrospectionList(_ref3) {
    var ofType = _ref3.ofType;

    var type = ofType;
    if (type instanceof _graphql.GraphQLNonNull) {
      type = type.ofType;
    }

    return IntrospectionTypes[type.name] === type;
  };

  ComplexityVisitor.prototype.getFieldCost = function getFieldCost() {
    var fieldDef = this.context.getFieldDef();
    if (fieldDef && fieldDef.getCost) {
      return fieldDef.getCost();
    }

    var directiveCost = this.getDirectiveValue('cost');
    if (directiveCost != null) {
      return directiveCost;
    }

    return this.getTypeCost(this.context.getType());
  };

  ComplexityVisitor.prototype.getTypeCost = function getTypeCost(type) {
    if (type instanceof _graphql.GraphQLNonNull || type instanceof _graphql.GraphQLList) {
      return this.getTypeCost(type.ofType);
    }

    return type instanceof _graphql.GraphQLObjectType ? this.objectCost : this.scalarCost;
  };

  ComplexityVisitor.prototype.getDirectiveValue = function getDirectiveValue(directiveName) {
    var fieldDef = this.context.getFieldDef();
    if (!fieldDef || !fieldDef.astNode || !fieldDef.astNode.directives) {
      return null;
    }

    var directive = fieldDef.astNode.directives.find(function (_ref4) {
      var name = _ref4.name;
      return name.value === directiveName;
    });
    if (!directive) {
      return null;
    }

    var valueArgument = directive.arguments.find(function (argument) {
      return argument.name.value === 'value';
    });

    if (!valueArgument) {
      var fieldName = fieldDef.name;
      var parentTypeName = this.context.getParentType().name;

      throw new Error('No `value` argument defined in `@' + directiveName + '` directive ' + ('on `' + fieldName + '` field on `' + parentTypeName + '`.'));
    }

    return parseFloat(valueArgument.value.value);
  };

  ComplexityVisitor.prototype.getCalculator = function getCalculator() {
    return this.currentFragment === null ? this.rootCalculator : this.fragmentCalculators[this.currentFragment];
  };

  ComplexityVisitor.prototype.enterFragmentSpread = function enterFragmentSpread(node) {
    this.getCalculator().addFragment(this.costFactor, node.name.value);
  };

  ComplexityVisitor.prototype.enterFragmentDefinition = function enterFragmentDefinition(node) {
    var fragmentName = node.name.value;
    this.fragmentCalculators[fragmentName] = new CostCalculator();
    this.currentFragment = fragmentName;
  };

  ComplexityVisitor.prototype.leaveFragmentDefinition = function leaveFragmentDefinition() {
    this.currentFragment = null;
  };

  ComplexityVisitor.prototype.getCost = function getCost() {
    return this.rootCalculator.calculateCost(this.fragmentCalculators);
  };

  return ComplexityVisitor;
}();

function complexityLimitExceededErrorMessage() {
  // By default, don't respond with the cost to avoid leaking information about
  // the cost scheme to a potentially malicious client.
  return 'query exceeds complexity limit';
}

function createComplexityLimitRule(maxCost) {
  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var onCost = _ref5.onCost,
      createError = _ref5.createError,
      formatErrorMessage = _ref5.formatErrorMessage,
      options = _objectWithoutProperties(_ref5, ['onCost', 'createError', 'formatErrorMessage']);

  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!(createError && formatErrorMessage), 'formatErrorMessage is ignored when createError is specified.') : void 0;

  formatErrorMessage = // eslint-disable-line no-param-reassign
  formatErrorMessage || complexityLimitExceededErrorMessage;

  return function ComplexityLimit(context) {
    var visitor = new ComplexityVisitor(context, options);

    return {
      enter: function enter(node) {
        var visit = (0, _graphql.getVisitFn)(visitor, node.kind, false);
        if (visit) {
          visit.apply(visitor, arguments); // eslint-disable-line prefer-rest-params
        }
      },
      leave: function leave(node) {
        var visit = (0, _graphql.getVisitFn)(visitor, node.kind, true);
        if (visit) {
          visit.apply(visitor, arguments); // eslint-disable-line prefer-rest-params
        }

        if (node.kind === 'Document') {
          var cost = visitor.getCost();

          if (onCost) {
            onCost(cost, context);
          }

          if (cost > maxCost) {
            context.reportError(createError ? createError(cost, node) : new _graphql.GraphQLError(formatErrorMessage(cost), [node]));
          }
        }
      }
    };
  };
}